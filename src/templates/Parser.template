{{ convs = {} }}
{{~ func ShortHelp(cmd) ~}}{{ cmd.Name }}{{ if cmd && cmd.HelpText && !cmd.HelpText.IsEmpty }} - { HelpTexts.{{ cmd.UnderscoredName }} }{{~ end ~}}{{~ end~}}
{{~
    func GetCmdHelp(command)
~}}
    "{{ command.HelpText }}\nsubcommands:\n{{~if command.Default ~}}\t(default){{ShortHelp(command.Default)}}\n{{ end }}{{ for cmd in command.Children }}\t{{ShortHelp(cmd)}}\n{{ end }} ";
{{~ end ~}}
{{~
	func GetDefaultCommand(command)
		if command.Default && command.Default.Parameters
			ret command.Default
		else if command.Default
			ret GetDefaultCommand(command.Default)
		else
			ret null
		end
	end
~}}
{{~ func Help(command)
        if command.Children
~}}
            case "{{ command.FullName }}": 
                return HelpTexts.Full_{{command.UnderscoredName}};
            {{ for cmd in command.Children; Help(cmd); end }}
        {{ if command.Default; Help(command.Default); end }}
        {{~ else ~}}
            case "{{ command.FullName }}":
                return HelpTexts.Full_{{command.UnderscoredName}};
        {{~ end ~}}

{{~ end ~}}
{{~
    func Escape(str)
        ret str | string.replace "\"" "\"\""
    end
 ~}}

{{~ func GenerateConverter(param, valueToParse) ~}} 
    {{ if convs | object.has_key param.DisplayTypeName }}
        {{ param.RawName }} = {{ convs[param.DisplayTypeName]}}.Convert({{ valueToParse }});
    {{ else if param.IsString }}
        {{ param.RawName }} = {{ valueToParse }};
    {{ else if param.IsEnum }}
        {{ param.RawName }} = EnumParser.Parse_{{ param.UnderscoredTypeName }}({{ valueToParse }});
    {{ else if HasMethod(param, "Parse", 1)}}
        {{ param.RawName }} = {{ param.DisplayTypeName}}.Parse({{ valueToParse}});
    {{ else if HasMethod(param, "TryParse", 2)}}
        if(!{{ param.DisplayTypeName }}.TryParse({{ valueToParse }}, out {{param.RawName}}))
            throw new Exception();
    {{ else if HasCtor(param, ["string"])}}
        {{ param.RawName }} = new {{ param.DisplayTypeName}}({{ valueToParse}});
    {{ else; Error("Cannot create convertor for "+ param.DisplayTypeName) }}
    {{ end }}
{{~ end ~}}
{{~ func GenerateOptionConverter(option) ~}}
    {{ valueToParse = option.RawName + "Raw" }}
    {{ if option.IsArray }}
        {{ if convs | object.has_key option.DisplayTypeName }}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => {{ convs[option.DisplayTypeName]}}.Convert(o)).ToArray();
        {{ else if option.IsString }}
            {{ option.RawName }} = {{ valueToParse }}.ToArray();
        {{ else if option.IsEnum }}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => EnumParser.Parse_{{option.UnderscoredTypeName}}(o)).ToArray();
        {{ else if HasMethod(option, "Parse", 1)}}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => {{ option.DisplayTypeName}}.Parse(o)).ToArray();
        {{ else if HasMethod(option, "TryParse", 2)}}
            {{option.RawName}} = {{ valueToParse }}.Select(o => {
                if(!{{ option.DisplayTypeName }}.TryParse(o, out var val))
                    throw new Exception();
                return val;
            }).ToArray();
        {{ else if HasCtor(option, ["string"])}}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => new {{ option.DisplayTypeName}}(o)).ToArray();
        {{ else; Error("Cannot create convertor for "+ option.DisplayTypeName) }}
        {{ end }}
    {{ else }}
        {{ GenerateConverter(option, option.RawName + "Raw") }}
    {{ end }}
{{~ end ~}}

{{~ func GenerateCase(command, isDefault = false) ~}}

{{~ if isDefault ~}}
case string _{{ command.RawName }}:
{{~ else ~}}
case "{{ command.Name }}":
{{~ end ~}}
{
    {{ if isDefault }}
    if(_{{ command.RawName }} == "{{ command.Name }}")
    {
        segment = new ArraySegment<string>(args, segment.Offset+1, segment.Count - 1);
    }
    {{ else }}
    segment = new ArraySegment<string>(args, segment.Offset+1, segment.Count - 1);
    {{ end }}
    if(segment.FirstOrDefault() == "--help")
    {
        Console.WriteLine(GetHelp("{{ command.FullName }}"));
        return;
    }
    {{ if command.Children }}
    if(segment.Count < 1)
    {
        Console.WriteLine(GetHelp("{{ command.FullName }}"));
        return;
    }
    switch(segment[0])
    {
        {{ for cmd in command.Children; GenerateCase(cmd); end }}
        {{~
        if command.Default
            GenerateCase(command.Default, true)
        else
        ~}}
        case string {{ command.RawName}}_unknown:
            {{ if GenerateSuggestions }}
            var posible_{{command.RawName}} = 
                new[] { {{ for cmd in command.Children; "\"" + cmd.Name + "\", "; end }} }
                .Select(cmd => (cmd, LevenshteinDistance.Calculate(cmd, {{ command.RawName }}_unknown )))
                .OrderBy(x => x.Item2)
                .ThenBy(x => x.Item1)
                .FirstOrDefault(x => x.Item2 <= 2);
            if(posible_{{command.RawName}}.Item1 is not null) 
            {
                Console.WriteLine(GetHelp("{{ command.FullName }}"));
                Console.WriteLine($"Did you mean '{posible_{{command.RawName}}.Item1}'?");
            }
            {{ else }}
            Console.WriteLine(GetHelp("{{ command.FullName }}"));
            Error("Unknown command");
            {{ end }}
            break;
        {{~ end ~}}
    }
    {{ else }}
    if(segment.Count < {{ command.Parameters | array.size }})
    {
       Error("Not all parameters are specified");
    }
    {{ if (command.Parameters | array.size) > 0 }}
        {{ for parameter in command.Parameters }}
            {{ parameter.DisplayTypeName }}{{ parameter.IsNullable ? "?" : ""}} {{ parameter.RawName }} = default;
            try
            {
                {{GenerateConverter(parameter, "segment[" + (for.index) + "]") }}
            }
            catch(ArgumentParsingException exception)
            {
                Error($"Cannot parse parameter {{parameter.Name}}\n{exception.Message}");
            }
            catch
            {
                Error("Cannot parse parameter {{parameter.Name}}");
            }
        {{ end }}
    {{ end }}
    {{ if (command.Options | array.size) > 0 }}
        {{ for option in command.Options }}
            {{ option.IsArray ? "Queue<string>" : "string" }} {{ option.RawName }}Raw = null;
        {{ end }}
        for(int i = {{ command.Parameters | array.size }}; i < segment.Count;)
        {
            switch(segment[i++])
            {
                {{ for option in command.Options }}
                {{ if option.Alias }}
                case "-{{ option.Alias }}":
                {{ end }}
                case "--{{option.Name}}":
                    {{ if !option.IsBool }}
                    if(i >= segment.Count)
                    {
                        Error("Specify option value!");
                    }
                    {{ end }}
                    {{ if option.IsArray }}
                    {{ option.RawName}}Raw = new Queue<string>();
                    while(i < segment.Count && !segment[i].StartsWith('-'))
                    {
                        {{ option.RawName}}Raw.Enqueue(segment[i++]);
                    }
                    {{ else if option.IsBool }}
                    if(i < segment.Count && (segment[i].ToLower() == "true" || segment[i].ToLower() == "false"))
                    {
                        {{ option.RawName }}Raw = segment[i++];
                    }
                    else
                    {
                        {{ if option.Default == "true" }}
                        {{ option.RawName }}Raw = "false";
                        {{ else }}
                        {{ option.RawName }}Raw = "true";
                        {{ end }}
                    }
                    {{ else }}
                        {{ option.RawName }}Raw = segment[i++];
                    {{ end }}
                break;
                {{ end }}
                case string opt:
                    {{ if GenerateSuggestions }}
                    {
                        var posible_{{command.RawName}} = 
                            new string[]{ {{ for opt in command.Options; "\"--" + opt.Name + "\", "; if opt.Alias; "\"-" + opt.Alias + "\", "; end; end }} }
                            .Select(cmd => (cmd, LevenshteinDistance.Calculate(cmd, opt)))
                            .OrderBy(x => x.Item2)
                            .ThenBy(x => x.Item1)
                            .FirstOrDefault(x => x.Item2 <= 2);
                            
                        if(posible_{{command.RawName}}.Item1 is not null) 
                        {
                            Console.WriteLine(GetHelp("{{command.FullName}}"));
                            Console.WriteLine($"Did you mean '{posible_{{command.RawName}}.Item1}'?");
                            Environment.Exit(0);
                        }
                        else 
                        {
                            Error($"Unknown option {opt}");
                        }
                    }
                    {{ else }}
                    Error($"Unknown option {opt}");
                    {{ end }}
                    break;
            }
        }
        {{ for option in command.Options }}
            {{ option.DisplayTypeName }}{{option.IsArray ? "[]": ""}}{{option.IsNullable ? "?": ""}} {{ option.RawName}} = {{ option.Default ?? "default" }};
            try
            {
                if({{option.RawName}}Raw != null)
                {
                    {{ GenerateOptionConverter(option) }}
                }
            }
            catch(ArgumentParsingException exception)
            {
                Error($"Cannot parse option {{option.Name}}\n{exception.Message}");
            }
            catch
            {
                Error("Cannot parse option {{option.Name}}");
            }
        {{ end }}
    {{ end }}
    {{ command.NameInSourceCode }}({{ JoinParamsAndOptions(command) }}){{~ if command.IsTask ~}}.GetAwaiter().GetResult(){{ end }};
    {{ end }}
    break;
}
{{~ end ~}}
#nullable disable
using System;
using System.Linq;
using System.Collections.Generic;
namespace {{ Namespace }}
{
	public class EntryPoint
	{
		public static string GetHelp(string cmdName = null)
		{
			switch(cmdName)
			{
                {{ for cmd in Root.Children; Help(cmd); end }}
                {{ if Root.Default; Help(Root.Default); end }}
                {{~ $cmdChars = (Root.Default != null) ? ['[', ']'] : [ '<', '>' ]~}}
                default:
                    return $"{{~ if Root.HelpText ~}}{ HelpTexts.Root }\n{{~ end ~}}Usage: {{$cmdChars[0]}}command{{$cmdChars[1]}} <parameters> [options]\ncommands:\n{{~if Root.Default ~}}\t(default){{~ ShortHelp(Root.Default) ~}}\n{{~ end ~}}{{~for cmd in Root.Children~}}\t{{ShortHelp(cmd)}}\n{{~ end ~}}";
            }
		}
		private static void Error(string error)
		{
			Console.ForegroundColor = ConsoleColor.Red;
			Console.WriteLine(error);
			Console.ResetColor();
			Environment.Exit(0);
		}
		public static void Main(string[] args)
		{

            var segment = new ArraySegment<string>(args);
			{{~ def = GetDefaultCommand(Root) ~}}
			{{ if def && (array.size(def.Parameters) == 0) }}
			if(args.Length == 0)
			{
				{{ def.NameInSourceCode }}(){{~ if def.IsTask ~}}.GetAwaiter().GetResult(){{ end }};
				return;
			}
			{{ else }}
			if(args.Length == 0)
            {
                Console.WriteLine(GetHelp());
                return;
            }
			{{ end }}
            {{ for converter in Converters; $validName = converter.Key | string.replace "." "_" }}
                var {{ $validName }} = new {{ converter.Key }}();
                {{ for targetType in converter.Value }}
                    {{~ convName =  targetType | string.replace "." "_"  ~}}
                    IArgumentConverter<{{targetType}}> {{ convName }} = {{ $validName }};
                    {{ convs[targetType] = convName }}
                {{ end }}
            {{ end }}
            switch(segment[0])
            {
                case "help":
                    if(args.Length == 1)
                    {
                        Console.WriteLine(GetHelp());
                    }
                    else
                    {
                        Console.WriteLine(GetHelp(string.Join(" ", args.Skip(1))));
                    }
                    break;
                {{~ if GenerateCompletion }}
                case "complete":
                {
                    if(segment.Count < 2)
                        Error("Not all parameters are specified");
					int pos = 0;
					try
					{
						pos = int.Parse(segment[1]);
					}
					catch
					{
						Error("Cannot parse position");
					}
					if(segment.Count == 2)
					{
						segment = new ArraySegment<string>(new string[] {""});
					}
					else if(segment.Count == 3)
					{
						var spl = args[2].Split();
						pos -= spl[0].Length + 1;
						segment = new ArraySegment<string>(spl, 1, spl.Length - 1);
                    }
					else 
					{
						segment = new ArraySegment<string>(segment.Array, segment.Offset + 3, segment.Count - 3);
					}
					Completer.Complete(segment, pos);
                    break;
                }
                {{~ end ~}}
                {{ for cmd in Root.Children; GenerateCase(cmd); end }}
                {{ if Root.Default; GenerateCase(Root.Default, true); }}
                {{else}}
                case string unknowncmd: 
                {{ if GenerateSuggestions }}
                {
                    var posible = 
                        new[] { "help", {{ for cmd in Root.Children; "\"" + cmd.Name + "\", "; end }} }
                        .Select(cmd => (cmd, LevenshteinDistance.Calculate(cmd, unknowncmd)))
                        .OrderBy(x => x.Item2)
                        .ThenBy(x => x.Item1)
                        .FirstOrDefault(x => x.Item2 <= 2);
                    if(posible.Item1 is not null) 
                    {
                        Console.WriteLine(GetHelp());
                        Console.WriteLine($"Did you mean '{posible.Item1}'?");
                    } 
                    else 
                    {                                
                        Console.WriteLine(GetHelp());
                        Error("Unknown command");
                    }
                }
                {{ else }}
                Console.WriteLine(GetHelp());
                Error("Unknown command");
                {{ end }}
                break;
                {{ end }}
            }
        }
	}
}
