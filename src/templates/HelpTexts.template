{{~ func gen_param(p,cmd) ~}}
    public static string {{cmd.UnderscoredName}}_{{ p.RawName }} 
    {
        get 
        {
            {{ if p.HelpText?.Texts && (p.HelpText.Texts | array.size == 1) }}
            return "{{(p.HelpText.Texts | array.first).Value}}";
            {{ else if !p.HelpText?.Texts || (p.HelpText.Texts | array.size == 0) }}
            return "";
            {{ else }}
            switch(CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
            { 
                {{ for $cc in p.HelpText.Texts }} 
                case "{{$cc.Key}}": return "{{$cc.Value}}";
                {{ end }}
                default:
                    return "{{p.HelpText[DefaultLanguage]}}"; 
            }
            {{ end }}
        }
    }
{{~ end ~}}
{{~ func gen(cmd, genChildren = true, name = null) ~}}
	{{~ if genChildren && cmd.Children ~}}
		{{~ for c in cmd.Children; gen(c); end ~}}
        {{~ if cmd.Default; gen(cmd.Default); end ~}}
	{{~ end ~}}
		public static string {{ name ?? cmd.UnderscoredName }}
		{
			get 
			{
                {{ if cmd.HelpText?.Texts && (cmd.HelpText.Texts | array.size == 1) }}
                return "{{(cmd.HelpText.Texts | array.first).Value}}";
                {{ else if !cmd.HelpText?.Texts || (cmd.HelpText.Texts | array.size == 0)}}
                return "";
                {{ else }}
                switch(CultureInfo.CurrentCulture.TwoLetterISOLanguageName)
				{ 
					{{ for $cc in cmd.HelpText.Texts }} 
					case "{{$cc.Key}}": return "{{$cc.Value}}";
					{{ end }}
					default:
						return "{{cmd.HelpText[DefaultLanguage]}}"; 
				}
                {{ end }}
            }

		} 
        {{ for param in cmd.Parameters; gen_param(param, cmd); end }}
        {{ for opt in cmd.Options; gen_param(opt, cmd); end }}
{{~ end ~}}
{{~ 
    func escape(str)
        ret ((str | string.replace "\\" "\\\\") |  string.replace "\"" "\\\"")
    end
~}}    
{{~ func gen_full(cmd) ~}}
    {{ if cmd.Children; for c in cmd.Children; gen_full(c); end; end;}}
    {{ if cmd.Default; gen_full(cmd.Default); end }}
    public static string Full_{{cmd.UnderscoredName}} 
    {
        get 
        {
			var sb  = new StringBuilder();
            {{ if cmd.Children }}
				if(!string.IsNullOrEmpty({{cmd.UnderscoredName}}))
                    sb.AppendLine({{cmd.UnderscoredName}});
				sb.AppendLine("subcommands:");
				{{ if cmd.Default }}
				sb.Append("\t(default)").Append("{{cmd.Default.Name}}");
				if(!string.IsNullOrEmpty({{cmd.Default.UnderscoredName}}))
				{
					sb.Append(" - ").Append({{cmd.Default.UnderscoredName}});
				}
				sb.Append('\n');
				{{ end }}
				{{ for c in cmd.Children }}
				sb.Append('\t').Append("{{c.Name}}");
				if(!string.IsNullOrEmpty({{c.UnderscoredName}}))
				{
					sb.Append(" - ").Append({{c.UnderscoredName}});
				}
				sb.Append('\n');
                {{ end }}
			{{ else }}
				sb.AppendLine({{cmd.UnderscoredName }});
				{{ if (cmd.Parameters | array.size) > 0 }}
					sb.AppendLine("parameters:");
					{{ for param in cmd.Parameters }}
						{{ name = cmd.UnderscoredName + "_" + param.RawName }}
						sb.Append('\t').Append("{{ param.Name }}");
						if(!string.IsNullOrEmpty({{name}}))
						{
							sb.Append(" - ").Append({{name}});
						}
						sb.Append('\n');
					{{ end }}
				{{ end }} 
				sb.AppendLine("options:");
				{{ for option in cmd.Options}}
					{{ name = cmd.UnderscoredName + "_" + option.RawName }}
					sb.Append('\t'){{ if option.Alias; ".Append(\"-" + option.Alias + "|\")"; end}}.Append("--{{ option.Name }}");
					if(!string.IsNullOrEmpty({{name}}))
					{
						sb.Append(" - ").Append({{name}});
					}
					sb.Append('\n');
                {{ end }} 
                sb.Append("\t--help - shows this message\n");
			{{ end }}	
			return sb.ToString();
        }
    }
{{~ end ~}} 
using System.Globalization;
using System.Text;
namespace {{ Namespace }}
{
	public class HelpTexts
	{
		{{ for cmd in Root.Children; gen(cmd); end}} 
		{{ for cmd in Root.Children; gen_full(cmd); end}} 
        {{ if Root.Default; gen(Root.Default); end }}
        {{ gen(Root, false, "Root") }}
        {{ if Root.Default; gen_full(Root.Default); end }}
    }
}
