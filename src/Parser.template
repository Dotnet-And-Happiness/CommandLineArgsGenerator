{{ convs = {} }}
{{~ func ShortHelp(cmd) ~}}{{ cmd.Name }} - {{ cmd.HelpText }}{{~ end~}}
{{~
    func GetCmdHelp(command)
~}}
    "{{ command.HelpText }}\nsubcommands:\n{{~if command.Default ~}}\t(default){{ShortHelp(command.Default)}}\n{{ end }}{{ for cmd in command.Children }}\t{{ShortHelp(cmd)}}\n{{ end }} ";
{{~ end ~}}
{{~ func Help(command)
        if command.Children  
~}}
            case "{{ command.FullName }}":
                return {{ GetCmdHelp(command) }}; 
            {{ for cmd in command.Children; Help(cmd); end }}
        {{ if command.Default; Help(command.Default); end }}
        {{~ else ~}}
            case "{{ command.FullName }}":
                return 
@"{{command.HelpText}}
{{~ if (command.Parameters | array.size) > 0 ~}}
parameters:
    {{~ for param in command.Parameters ~}} 
    {{param.Name}} - {{ param.HelpText }} 
    {{~ end ~}}
{{~ end ~}}
{{~ if (command.Options | array.size) > 0 ~}}
options:
    {{ for opt in command.Options }} {{opt.Name}}(default ={{ opt.Default | Escape }}) - {{ opt.HelpText }} {{ end }}
{{~ end ~}}
";      
        {{~ end ~}}
        
{{~ end ~}}
{{~
    func Escape(str)
        ret str | string.replace "\"" "\"\""
    end
 ~}}
 
{{~ func GenerateConverter(param, valueToParse) ~}}
    {{ if convs | object.has_key param.DisplayTypeName }}
        {{ param.RawName }} = {{ convs[param.DisplayTypeName]}}.Convert({{ valueToParse }});
    {{ else if param.IsString }}
        {{ param.RawName }} = {{ valueToParse }};
    {{ else if param.IsEnum }}
        {{ param.RawName }} = Enum.Parse<{{ param.DisplayTypeName }}>({{ valueToParse }}, true); 
    {{ else if HasMethod(param, "Parse", 1)}}
        {{ param.RawName }} = {{ param.DisplayTypeName}}.Parse({{ valueToParse}});
    {{ else if HasCtor(param, ["string"])}}
        {{ param.RawName }} = new {{ param.DisplayTypeName}}({{ valueToParse}});
    {{ end }} 
{{~ end ~}}
{{~ func GenerateOptionConverter(option) ~}}
    {{ valueToParse = option.RawName + "Raw" }}
    {{ if option.IsArray }}
        {{ if convs | object.has_key option.DisplayTypeName }}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => {{ convs[option.DisplayTypeName]}}.Convert(o)).ToArray();
        {{ else if option.IsString }}
            {{ option.RawName }} = {{ valueToParse }}.ToArray();
        {{ else if option.IsEnum }}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => Enum.Parse<{{option.DisplayTypeName}}>(o, true)).ToArray(); 
        {{ else if HasMethod(option, "Parse", 1)}}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => {{ option.DisplayTypeName}}.Parse(o)).ToArray();
        {{ else if HasCtor(option, ["string"])}}
            {{ option.RawName }} = {{ valueToParse }}.Select(o => new {{ option.DisplayTypeName}}(o)).ToArray();
        {{ end }} 
    {{ else }}
        {{ GenerateConverter(option, option.RawName + "Raw") }}
    {{ end }}
{{~ end ~}}

{{~ func GenerateCase(command, nestingLevel, isDefault = false) ~}}

{{~ if isDefault ~}}
case string {{ command.RawName }}:
{{~ else ~}}
case "{{ command.Name }}":
{{~ end ~}}
{ 
    {{ if isDefault }}
    if({{ command.RawName }} == "{{ command.Name }}")
    {
        segment = new ArraySegment<string>(args, segment.Offset+1, segment.Count - 1);
    }
    {{ else }}
    segment = new ArraySegment<string>(args, segment.Offset+1, segment.Count - 1);
    {{ end }}
    {{ if command.Children }}
    if(segment.Count < 1)
    {
        Console.WriteLine(GetHelp());
        return;
    }
    switch(segment[0])
    {
        {{ for cmd in command.Children; GenerateCase(cmd, (isDefault ? nestingLevel : (nestingLevel + 1))); end }}
        {{~ 
        if command.Default
            GenerateCase(command.Default,(nestingLevel + 1), true)
        else 
        ~}}
        default: 
            Console.WriteLine(GetHelp());
            Error("Unknown command");
            break;
        {{~ end ~}}
    }
    {{ else }}
    if(segment.Count < {{ command.Parameters | array.size }})
    {
       Error("Not all parameters are specified");
    }
    {{ if (command.Parameters | array.size) > 0 }}
        {{ for parameter in command.Parameters }}
            {{ parameter.DisplayTypeName }} {{ parameter.RawName }} = default; 
            try 
            {
                {{GenerateConverter(parameter, "segment[" + (for.index) + "]") }}
            }
            catch
            {
                Error("Cannot parse parameter {{parameter.Name}}");
            } 
        {{ end }}
    {{ end }}
    {{ if (command.Options | array.size) > 0 }}
        {{ for option in command.Options }}
            {{ option.IsArray ? "Queue<string>" : "string" }} {{ option.RawName }}Raw = null;
        {{ end }}
        for(int i = {{ command.Parameters | array.size }}; i < segment.Count; i++)
        {
            switch(segment[i++])
            {
                {{ for option in command.Options }}
                case "--{{option.Name}}":
                    {{ if option.IsArray }}
                    {{ option.RawName}}Raw = new Queue<string>();
                    while(i < segment.Count && !segment[i].StartsWith('-'))
                    {
                        {{ option.RawName}}Raw.Enqueue(args[i++]);
                    }
                    {{ else }}
                        {{ option.RawName }}Raw = args[i];
                    {{ end }}
                break;
                {{ end }}
            }
        }
        {{ for option in command.Options }}
            {{ option.DisplayTypeName }}{{option.IsArray ? "[]": ""}} {{ option.RawName}} = {{ option.Default ?? "default" }};
            try
            {
                if({{option.RawName}}Raw != null)
                {
                    {{ GenerateOptionConverter(option) }}
                }
            }
            catch
            {
                Error("Cannot parse option {{option.Name}}");
            }
        {{ end }}
    {{ end }}
    {{ command.NameInSourceCode }}({{ JoinParamsAndOptions(command) }});
    {{ end }}
    break;
}
{{~ end ~}} 
using System;
using System.Linq;
using System.Collections.Generic;
namespace {{ Namespace }}
{
	public class EntryPoint 
	{
		public static string GetHelp(string cmdName = null)
		{
			switch(cmdName)
			{ 
                {{ for cmd in Root.Children; Help(cmd); end }} 
                {{ if Root.Default; Help(Root.Default); end }}
                default: 
                    return "Usage: <command> <parameters> [options]\ncommands:\n\t(default){{~if Root.Default; ShortHelp(Root.Default); end ~}}\n{{~for cmd in Root.Children~}}\t{{ShortHelp(cmd)}}\n{{~ end ~}}";
            }
		}
		private static void Error(string error)
		{
			Console.ForegroundColor = ConsoleColor.Red;
			Console.WriteLine(error);
			Console.ResetColor();
			Environment.Exit(0);
		}
		public static void Main(string[] args)
		{   
            if(args.Length == 0)
            {
                Console.WriteLine(GetHelp());
                return;
            }
            {{ for converter in Converters; $validName = converter.Key | string.replace "." "_" }}
                var {{ $validName }} = new {{ converter.Key }}();
                {{ for targetType in converter.Value }}
                    {{~ convName =  targetType | string.replace "." "_"  ~}}
                    IArgumentConverter<{{targetType}}> {{ convName }} = {{ $validName }};
                    {{ convs[targetType] = convName }}
                {{ end }}
            {{ end }}  
            var segment = new ArraySegment<string>(args);
            switch(segment[0])
            {
                case "help":
                    if(args.Length == 1)
                    {
                        Console.WriteLine(GetHelp());
                    }
                    else
                    {
                        Console.WriteLine(GetHelp(string.Join(" ", args.Skip(1))));
                    }
                    break;
                {{ for cmd in Root.Children; GenerateCase(cmd, 1); end }}
                {{ if Root.Default; GenerateCase(Root.Default, 1, true); end }}
            }
        }
	}
}