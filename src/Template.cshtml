@using CommandLineArgsGenerator
@using System.Text
@using System
@using System.Linq
@using System.Collections.Generic
@namespace CommandLineArgsGenerator
using System;
using System.Linq;
using System.Collections.Generic;
namespace @(Model.Namespace)
{
    public class EntryPoint
    {
        public static void Error(string error)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(error);
            Console.ResetColor();
            Environment.Exit(0);
        }
        public static string GetHelp(string cmd = null)
        {
            switch(cmd)
            {
                @{
                    var w = new IntentedWriter();
                    w.Level += 4;
                    GetCaseHelp(Model.Root, w);
                }
@Raw(w.ToString())
                default: 
                    @{
                        var writer = new IntentedWriter();
                        writer.WriteLine("Usage: <command> <parameters> [options]",true);
                        writer.WriteLine("commands:", true);
                        writer.Level++;
                        foreach(var cmd in Model.Root.Children)
                        {
                            GetShortHelp(cmd, writer);
                        }
                        writer.Level--;
                    }
                    return "@Raw(writer.ToString())";
            }
        }
        public static void Main(string[] args)
        {
            if(args.Length == 0)
            {
                Console.WriteLine(GetHelp());
                return;
            } 
            @foreach(var conv in Model.Converters)
            { 
                var name = conv.Key.Replace(".", "_");
            
            @:var @name = new @(GetNameWithoutNamespace(conv.Key))();
            
                @foreach(var type in conv.Value)
                {
                    var convname = $"conv{converters.Count}";
                    converters.Add(type, convname); 
                
            @:IArgumentConverter<@type> @(convname) = @(name); 
                
                }
            } 
            switch(args[0])
            { 
                @{
                    writer.Clear();
                    writer.Level = 4;
                 }
@Raw(GenerateCommands(Model.Root, writer))
                case "help":
                {
                    if(args.Length == 1)
                    {
                        Console.WriteLine(GetHelp());
                    }
                    else
                    {
                        Console.WriteLine(GetHelp(string.Join(" ",args.Skip(1))));
                    }
                    break;
                }
                default:
                    Console.WriteLine(GetHelp());
                    break;
            }
        }
    }
}

@functions 
{
    
    Dictionary<string, string> converters = new Dictionary<string, string>();
    private string GetNameWithoutNamespace(string name)
    {
        return name.Substring(name.IndexOf('.')+1);
    }
    
    private void GetShortHelp(ICommandInfo info, IntentedWriter writer)
    {
        writer.WriteLine($"{info.Name}: {info.HelpText}", true);
    }
    private void GetCaseHelp(ICommandInfo info, IntentedWriter writer)
    {
        if(!string.IsNullOrWhiteSpace(info.FullName))
        {
            writer.WriteLine($"case \"{info.FullName}\":");
            writer.Level++;
            writer.WriteLine($"return \"{GetHelp(info)}\";");
            writer.Level--;
        }
        if(info is RootCommand root)
        {
            
            foreach(var cmd in root.Children)
            {
                GetCaseHelp(cmd, writer);
            } 
        }
    }
    private IEnumerable<TOut> Only<TIn, TOut>(IEnumerable<TIn> collection)
    {
        return collection.Where(x => x is TOut).Cast<TOut>();
    }
    private string GenerateCommands(RootCommand command, IntentedWriter writer)
    {
        foreach(var cmd in command.Children)
        {
            GenerateCase(cmd, writer, 1);
        } 
        return writer.ToString();
    }
    private void GenerateCase(ICommandInfo cmd, IntentedWriter writer, int nestingLevel)
    {
        if(cmd is RootCommand root)
        {
            GenerateRootCommand(root, writer, nestingLevel);
        } 
        else if(cmd is CommandInfo cmdinfo)
        {
            GenerateCommand(cmdinfo, writer, nestingLevel);
        }
    }
    private void GetConvertor(ParameterInfo param, IntentedWriter writer, int index)
    {
        var val = param is OptionInfo opt ? $"{opt.RawName}Raw" : $"args[{index}]";
        if(param is OptionInfo option)
        {
            if(option.IsString)
            {
                if(option.IsArray)
                {
                    writer.WriteLine($"{option.RawName} = {val} as string[];");    
                }
                else
                {
                    writer.WriteLine($"{option.RawName} = {val} as string;");
                }
            } 
            else if(converters.ContainsKey(option.DisplayTypeName))
            {
                if(option.IsArray)
                {
                    writer.WriteLine($"{option.RawName} = ({val} as string[]).Select(x => {converters[option.DisplayTypeName]}.Convert(x));");
                }
                else
                {
                    writer.WriteLine($"{option.RawName} = {converters[option.DisplayTypeName]}.Convert({val} as string);");
                }
            }
            else if(option.IsEnum)
            {
                if(option.IsArray)
                {
                    writer.WriteLine($"{option.RawName} = ({val} as string[]).Select(x => Enum.Parse<{option.DisplayTypeName}>(x, true));");
                }
                else
                {
                    writer.WriteLine($"{option.RawName} = Enum.Parse<{option.DisplayTypeName}>({val} as string, true);");
                }
            }
            else if(option.Type.GetMembers("Parse").Any())
            {
                if(option.IsArray)
                {
                    writer.WriteLine($"{option.RawName} = ({val} as string[]).Select(x => {option.DisplayTypeName}.Parse(x));");
                }
                else
                {
                    writer.WriteLine($"{option.RawName} = {option.DisplayTypeName}.Parse({val} as string);");
                }
            }
        }
        else
        {
            if(param.IsString)
            {
                writer.WriteLine($"{param.RawName} = {val};");
            } 
            else if(converters.ContainsKey(param.DisplayTypeName))
            {
                writer.WriteLine($"{param.RawName} = {converters[param.DisplayTypeName]}.Convert({val});");
            }
            else if(param.IsEnum)
            {
                writer.WriteLine($"{param.RawName} = Enum.Parse<{param.DisplayTypeName}>({val}, true);");
            }
            else if(param.Type.GetMembers("Parse").Any())
            {
                writer.WriteLine($"{param.RawName} = {param.DisplayTypeName}.Parse({val});");
            }
        }
    }
    private void GenerateConversion(ParameterInfo param, IntentedWriter writer, int index = 0)
    {
        var defaultValue = param is OptionInfo opt ? opt.Default : "default";
        
        writer.WriteLine($"{param.DisplayTypeName} {param.RawName} = {defaultValue};");
        writer.WriteLine("try");
        writer.WriteLine("{");
        writer.Level++;
        if(param is OptionInfo option)
        {
            writer.WriteLine($"if({option.RawName}Raw != null)");
            writer.WriteLine("{");
            writer.Level++;
            GetConvertor(param, writer, index);    
            writer.Level--;
            writer.WriteLine("}");
        }
        else
        {
            GetConvertor(param, writer, index);
        }
        writer.Level--;
        writer.WriteLine("}");
        writer.WriteLine("catch");
        writer.WriteLine("{");
        writer.Level++;
        writer.WriteLine($"Error(\"Cannot parse {param.Name}\");");
        writer.Level--;
        writer.WriteLine("}");
    }
    private void GenerateCommand(CommandInfo cmd, IntentedWriter writer, int nestingLevel)
    {
        writer.WriteLine($"case \"{cmd.Name}\":");
        writer.WriteLine("{");
        writer.Level++;
        writer.WriteLine($"if(args.Length >= {cmd.Parameters.Length + nestingLevel})");
        writer.WriteLine("{");
        writer.Level++; 
        if(cmd.Parameters.Length > 0)
        {
            for(int paramIndex = 0; paramIndex < cmd.Parameters.Length; paramIndex++)
            {
                var param = cmd.Parameters[paramIndex];
                GenerateConversion(param, writer, paramIndex + nestingLevel); 
            }
        }
        if(cmd.Options.Length > 0)
        {
            foreach(var option in cmd.Options)
            {
                writer.WriteLine($"object {option.RawName}Raw = null;");
            }
            writer.WriteLine($"for(int arg = {cmd.Parameters.Length + nestingLevel}; arg < args.Length; arg++)");
            writer.WriteLine("{");
            writer.Level++;
            
            
            writer.WriteLine("switch(args[arg])");
            writer.WriteLine("{");
            writer.Level++;
            foreach(var option in cmd.Options)
            {
                writer.WriteLine($"case \"--{option.Name}\": ");
                if(option.IsArray is false)
                {
                    writer.WriteLine($"\t{option.RawName}Raw = args[++arg]; break;");
                }
                else
                {
                    writer.WriteLine("{");
                    writer.Level++;
                    
                    writer.WriteLine($"var values = new Queue<string>();");
                    writer.WriteLine("while(arg + 1 < args.Length && !args[++arg].StartsWith(\"--\"))");
                    writer.WriteLine("{");
                    writer.Level++;
                    writer.WriteLine("values.Enqueue(args[arg]);");
                    writer.Level--;
                    writer.WriteLine("}");
                    
                    writer.WriteLine($"{option.RawName}Raw = values.ToArray();");
                    writer.WriteLine("break;");
                    writer.Level--;
                    writer.WriteLine("}");
                }
            }
            writer.Level--;
            writer.WriteLine("}");
            
            writer.Level--;
            writer.WriteLine("}");
            for(int optIndex = 0; optIndex < cmd.Options.Length; optIndex++)
            {
                var opt = cmd.Options[optIndex];
                GenerateConversion(opt, writer, optIndex + nestingLevel); 
            }   
            
        }
        writer.WriteLine($"{GetNameWithoutNamespace(cmd.NameInSourceCode)}({string.Join(",", cmd.Parameters.Select(x => x.RawName).Concat(cmd.Options.Select(x => x.RawName)))});");
        writer.Level--;
        writer.WriteLine("}");
        writer.WriteLine("else");
        writer.Level++;
        writer.WriteLine("Error(\"Not all parameters are specified\");");
        writer.Level--;
        writer.WriteLine("break;");
        writer.Level--;
        writer.WriteLine("}");
        
    }
    private void GenerateRootCommand(RootCommand root, IntentedWriter writer, int nestingLevel)
    {
        
        writer.WriteLine($"case \"{root.Name}\":");
        writer.WriteLine("{");
        writer.Level++;
        writer.WriteLine($"if({nestingLevel} < args.Length)");
        writer.WriteLine("{");
        writer.Level++;
        writer.WriteLine($"switch(args[{nestingLevel}])");
        writer.WriteLine("{");
        writer.Level++;
        foreach(var cmd in root.Children)
        {
            GenerateCase(cmd, writer, nestingLevel + 1);
        } 
        
        writer.WriteLine("case string s:");
        writer.WriteLine("{");
        writer.Level++;
        writer.WriteLine("Error($\"Command {s} is unknown\");");
        writer.WriteLine("break;");
        writer.Level--;
        writer.WriteLine("}");
        writer.Level--;
        writer.WriteLine("}");
        writer.Level--;
        writer.WriteLine("}");
        writer.WriteLine("break;");
        writer.Level--;
        writer.WriteLine("}");
        
    }  
    private string GetHelp(ICommandInfo info)
    {
        var writer = new StringBuilder();
        writer.Append($"{info.Name}: {info.HelpText}\\n");
        if(info is CommandInfo cmd)
        {
            if(cmd.Parameters.Length > 0)
            {
                writer.Append("parameters:\\n");
                foreach(var param in cmd.Parameters)
                {
                    writer.Append($"\\t{param.Name}: {param.HelpText}\\n");
                }
            }
            if(cmd.Options.Length > 0)
            {
                writer.Append("options:\\n");
                foreach(var opt in cmd.Options)
                {
                    writer.Append($"\\t{opt.Name}: {opt.HelpText}\\n");
                }
            }
        }
        else if(info is RootCommand root)
        {
            writer.Append("subcommands:\\n");
            foreach(var c in root.Children)
            {
                writer.Append($"\\t{c.Name}: {c.HelpText}\\n");
            }
            if(root.Default is not null)
            {
                writer.Append($"\\t(default){root.Default.Name}: {root.Default.HelpText}\\n");
            }
        }
        return writer.ToString();
    }
} 